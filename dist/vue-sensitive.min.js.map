{"version":3,"file":"vue-sensitive.min.js","sources":["../vue-sensitive.js"],"sourcesContent":["module.exports = {\n  // eslint-disable-next-line space-before-function-paren\n  install (Vue) {\n    // eslint-disable-next-line consistent-return\n    Vue.filter('sensitive', (...args) => {\n      args = Array.prototype.slice.call(args);\n      // 参数\n      const val = args.shift();\n      // 类型\n      const type = args.shift();\n      // 判断非空\n      if (val) {\n        // 公共函数 弱化字符串\n        // str 需要处理的字符串\n        // start  保留的前几位\n        // end  保留的后几位\n        // char  替换的字符串\n        const hideStr = (str, start, end, char) => {\n          const size = str.length - start - end;\n          let middleStr = '';\n          for (let i = 0; i < size; i++) {\n            middleStr += char;\n          }\n          const leftStr = str.substring(0, start);\n          const rightStr = str.substring(str.length - end);\n          const newStr = leftStr + middleStr + rightStr;\n          return newStr;\n        };\n        // 过滤转换\n        // eslint-disable-next-line default-case\n        switch (type) {\n          // 中文姓氏\n          case 'name': {\n            // 复姓\n            const surname = ['欧阳', '太史', '端木', '上官', '司马', '东方', '独孤', '南宫', '万俟', '闻人', '夏侯', '诸葛', '尉迟', '公羊', '赫连', '澹台', '皇甫', '宗政', '濮阳', '公冶', '太叔', '申屠', '公孙', '慕容', '仲孙', '钟离', '长孙', '宇文', '城池', '司徒', '鲜于', '司空', '汝嫣', '闾丘', '子车', '亓官', '司寇', '巫马', '公西', '颛孙', '壤驷', '公良', '漆雕', '乐正', '宰父', '谷梁', '拓跋', '夹谷', '轩辕', '令狐', '段干', '百里', '呼延', '东郭', '南门', '羊舌', '微生', '公户', '公玉', '公仪', '梁丘', '公仲', '公上', '公门', '公山', '公坚', '左丘', '公伯', '西门', '公祖', '第五', '公乘', '贯丘', '公皙', '南荣', '东里', '东宫', '仲长', '子书', '子桑', '即墨', '达奚', '褚师'];\n            let star = '';\n            // 名字是两位，取姓名首位+*\n            if (val.length <= 2) {\n              return `${val.substring(0, 1)}*`;\n            }\n            // 名字存在复姓，去复姓+*, 复姓 + * +名\n            if (surname.indexOf(val.substring(0, 2)) > 0) {\n              star = `${val.substring(0, 2)}`;\n              if (val.length === 3) {\n                return `${star}*`;\n              }\n              if (val.length > 3) {\n                for (let i = 0; i < val.length - 3; i++) {\n                  star += '*';\n                }\n                return star + val.substring(val.length - 1, val.length);\n              }\n            }\n            // 名字不存在复姓，姓名+*\n            if (surname.indexOf(val.substring(0, 2)) < 0) {\n              for (let i = 0; i < val.length - 2; i++) {\n                star += '*';\n              }\n              return val.substring(0, 1) + star + val.substring(val.length - 1, val.length);\n            }\n            break;\n          }\n          case 'phone': {\n            // 11位手机号码\n            if (val.length === 11) {\n              return val.replace(/(\\d{3})\\d{4}(\\d{4})/, '$1****$2');\n            }\n            // 固定电话\n            if (val.length !== 11) {\n              return hideStr(val, 3, 4, '*');\n            }\n            break;\n          }\n          case 'email': {\n            // 邮箱地址\n            if (val.indexOf('@') > 0) {\n              let email = '';\n              const str = val.split('@');\n              let result = '';\n              if (str[0].length > 3) {\n                for (let i = 0; i < str[0].length - 3; i++) {\n                  result += '*';\n                }\n              }\n              email = `${str[0].substring(0, 3) + result}@${str[1]}`;\n              return email;\n            }\n            break;\n          }\n          case 'card': {\n            // 15、18位身份证号\n            // 第一代身份证15位，第二代身份证18位\n            if (val.length === 15) {\n              // 前六后三不脱敏，中间脱敏\n              return hideStr(val, 6, 3, '*');\n            }\n            if (val.length === 18) {\n              // 前六后四不脱敏，中间脱敏\n              return hideStr(val, 6, 4, '*');\n            }\n            break;\n          }\n          case 'bank': {\n            // 15、16、17、19位银行卡号\n            // 中国银行账号借记卡19位，对公帐户18位，个人帐户17位，一本通15位，老卡12位\n            if (val.length > 12) {\n              return val.replace(/^(.{4})(?:\\d+)(.{4})$/, '$1 **** **** $2');\n            }\n            break;\n          }\n        }\n      }\n    });\n  },\n};\n"],"names":["module","Vue","filter","args","val","Array","prototype","slice","call","shift","type","hideStr","str","start","end","char","size","length","middleStr","i","substring","surname","star","indexOf","replace","split","result"],"mappings":"+LAAAA,wBAEWC,KAEHC,OAAO,YAAa,kDAAIC,qCAGpBC,KAFCC,MAAMC,UAAUC,MAAMC,KAAKL,IAEjBM,QAEXC,EAAOP,EAAKM,WAEdL,EAAK,KAMDO,EAAU,SAACC,EAAKC,EAAOC,EAAKC,WAC1BC,EAAOJ,EAAIK,OAASJ,EAAQC,EAC9BI,EAAY,GACPC,EAAI,EAAGA,EAAIH,EAAMG,OACXJ,SAECH,EAAIQ,UAAU,EAAGP,GAERK,EADRN,EAAIQ,UAAUR,EAAIK,OAASH,WAMtCJ,OAED,WAEGW,GAAW,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACzfC,EAAO,MAEPlB,EAAIa,QAAU,SACNb,EAAIgB,UAAU,EAAG,UAGzBC,EAAQE,QAAQnB,EAAIgB,UAAU,EAAG,IAAM,EAAG,SAClChB,EAAIgB,UAAU,EAAG,GACR,IAAfhB,EAAIa,cACIK,SAERlB,EAAIa,OAAS,EAAG,KACb,IAAIE,EAAI,EAAGA,EAAIf,EAAIa,OAAS,EAAGE,OAC1B,WAEHG,EAAOlB,EAAIgB,UAAUhB,EAAIa,OAAS,EAAGb,EAAIa,YAIhDI,EAAQE,QAAQnB,EAAIgB,UAAU,EAAG,IAAM,EAAG,KACvC,IAAID,EAAI,EAAGA,EAAIf,EAAIa,OAAS,EAAGE,OAC1B,WAEHf,EAAIgB,UAAU,EAAG,GAAKE,EAAOlB,EAAIgB,UAAUhB,EAAIa,OAAS,EAAGb,EAAIa,kBAIrE,WAEgB,KAAfb,EAAIa,cACCb,EAAIoB,QAAQ,sBAAuB,eAGzB,KAAfpB,EAAIa,cACCN,EAAQP,EAAK,EAAG,EAAG,eAIzB,WAECA,EAAImB,QAAQ,KAAO,EAAG,KAElBX,EAAMR,EAAIqB,MAAM,KAClBC,EAAS,MACTd,EAAI,GAAGK,OAAS,MACb,IAAIE,EAAI,EAAGA,EAAIP,EAAI,GAAGK,OAAS,EAAGE,OAC3B,WAGHP,EAAI,GAAGQ,UAAU,EAAG,GAAKM,MAAUd,EAAI,aAKjD,UAGgB,KAAfR,EAAIa,cAECN,EAAQP,EAAK,EAAG,EAAG,QAET,KAAfA,EAAIa,cAECN,EAAQP,EAAK,EAAG,EAAG,eAIzB,UAGCA,EAAIa,OAAS,UACRb,EAAIoB,QAAQ,wBAAyB"}